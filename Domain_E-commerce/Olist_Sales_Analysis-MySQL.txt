CREATE DATABASE project_olist;
USE project_olist;

-- Create customers table
CREATE TABLE cleaned_customers (
    customer_id VARCHAR(255),
    customer_unique_id VARCHAR(255),
    customer_zip_code_prefix INT,
    customer_city VARCHAR(255),
    customer_state VARCHAR(50)
);

-- Create orders table
CREATE TABLE cleaned_orders (
    order_id VARCHAR(255),
    customer_id VARCHAR(255),
    order_status VARCHAR(50),
    order_purchase_timestamp DATETIME,
    order_approved_at DATETIME,
    order_delivered_carrier_date DATETIME,
    order_delivered_customer_date DATETIME,
    order_estimated_delivery_date DATETIME,
    carrier_delivery_status VARCHAR(50),
    customer_delivery_status VARCHAR(50),
    order_processing_time FLOAT,
    shipping_time FLOAT,
    purchase_year INT,
    purchase_month INT,
    purchase_day_of_week INT,
    total_order_value FLOAT
);

-- Create order_items table
CREATE TABLE cleaned_order_items (
    order_id VARCHAR(255),
    order_item_id INT,
    product_id VARCHAR(255),
    seller_id VARCHAR(255),
    shipping_limit_date DATETIME,
    price FLOAT,
    freight_value FLOAT,
    total_order_value FLOAT
);

-- Create products table
CREATE TABLE cleaned_products (
    product_id VARCHAR(255),
    product_category_name VARCHAR(255),
    product_name_lenght FLOAT,
    product_description_lenght FLOAT,
    product_photos_qty FLOAT,
    product_weight_g FLOAT,
    product_length_cm FLOAT,
    product_height_cm FLOAT,
    product_width_cm FLOAT
);

-- Create geolocation table
CREATE TABLE cleaned_geolocation (
    geolocation_zip_code_prefix INT,
    geolocation_lat FLOAT,
    geolocation_lng FLOAT,
    geolocation_city VARCHAR(255),
    geolocation_state VARCHAR(50)
);

-- Create sellers table
CREATE TABLE cleaned_sellers (
    seller_id VARCHAR(255),
    seller_zip_code_prefix INT,
    seller_city VARCHAR(255),
    seller_state VARCHAR(50)
);

-- Create order_payments table
CREATE TABLE cleaned_order_payments (
    order_id VARCHAR(255),
    payment_sequential INT,
    payment_type VARCHAR(50),
    payment_installments INT,
    payment_value FLOAT
);

show tables;
select * from cleaned_customers ;
select * from cleaned_geolocation ;
select * from cleaned_order_items ;
select * from cleaned_order_payments ;
select * from cleaned_orders ;
select * from cleaned_products ;
select * from cleaned_sellers ;

-- Question: How many orders were placed for each product category?
SELECT cleaned_products.product_category_name, 
       COUNT(cleaned_order_items.order_id) AS total_orders
FROM cleaned_order_items
JOIN cleaned_products ON cleaned_order_items.product_id = cleaned_products.product_id
GROUP BY cleaned_products.product_category_name
ORDER BY total_orders DESC;

-- Question: How many customers are there in each state?
SELECT cleaned_customers.customer_state, 
       COUNT(cleaned_customers.customer_id) AS total_customers
FROM cleaned_customers
GROUP BY cleaned_customers.customer_state
ORDER BY total_customers DESC;

-- Question: What is the total sales value for each state?
SELECT cleaned_customers.customer_state, 
       SUM(cleaned_orders.total_order_value) AS total_sales
FROM cleaned_orders
JOIN cleaned_customers ON cleaned_orders.customer_id = cleaned_customers.customer_id
GROUP BY cleaned_customers.customer_state
ORDER BY total_sales DESC;

-- Question: What is the total shipping time for each state?
SELECT cleaned_customers.customer_state, 
       SUM(cleaned_orders.shipping_time) AS total_shipping_time
FROM cleaned_orders
JOIN cleaned_customers ON cleaned_orders.customer_id = cleaned_customers.customer_id
GROUP BY cleaned_customers.customer_state
ORDER BY total_shipping_time DESC;

-- Question: How many delayed orders are there in each state?
SELECT cleaned_customers.customer_state, 
       COUNT(*) AS total_orders,
       SUM(CASE WHEN cleaned_orders.customer_delivery_status = 'Delayed' THEN 1 ELSE 0 END) AS delayed_orders
FROM cleaned_orders
JOIN cleaned_customers ON cleaned_orders.customer_id = cleaned_customers.customer_id
GROUP BY cleaned_customers.customer_state
ORDER BY delayed_orders DESC;

-- Question: How many orders were placed in each region (state)?
SELECT cleaned_customers.customer_state, 
       COUNT(cleaned_orders.order_id) AS total_orders
FROM cleaned_orders
JOIN cleaned_customers ON cleaned_orders.customer_id = cleaned_customers.customer_id
GROUP BY cleaned_customers.customer_state
ORDER BY total_orders DESC;

-- Question: What is the total revenue generated by each product category?
SELECT cleaned_products.product_category_name, 
       SUM(cleaned_orders.total_order_value) AS total_revenue
FROM cleaned_orders
JOIN cleaned_order_items ON cleaned_orders.order_id = cleaned_order_items.order_id
JOIN cleaned_products ON cleaned_order_items.product_id = cleaned_products.product_id
GROUP BY cleaned_products.product_category_name
ORDER BY total_revenue DESC;


-- Question: What is the average order value for each customer?
SELECT cleaned_customers.customer_unique_id, 
       AVG(cleaned_orders.total_order_value) AS average_order_value
FROM cleaned_orders
JOIN cleaned_customers ON cleaned_orders.customer_id = cleaned_customers.customer_id
GROUP BY cleaned_customers.customer_unique_id
ORDER BY average_order_value DESC;


-- -----------------------------------------------------------------------------

-- Fixing shiping time as there are so much inaccurate data
SET SQL_SAFE_UPDATES = 0;

UPDATE cleaned_orders
SET shipping_time = 1
WHERE shipping_time IS NULL;

UPDATE cleaned_orders
SET shipping_time = 1
WHERE shipping_time <= 0;

UPDATE cleaned_orders
SET shipping_time = CEIL(shipping_time);


-- Tableau public version has restriction with multiple connection for merging the relevant tables in MySQL 
-- So exporting the result as a CSV to use in Tableau Public.

DESCRIBE cleaned_orders;
DESCRIBE cleaned_order_items;

SELECT
    cleaned_orders.order_id,
    cleaned_orders.customer_id,
    cleaned_orders.order_status,
    cleaned_orders.total_order_value,
    cleaned_orders.order_purchase_timestamp,
    cleaned_orders.shipping_time,  
    cleaned_customers.customer_unique_id,
    cleaned_customers.customer_state,
    cleaned_customers.customer_city,  
    cleaned_order_items.product_id,
    cleaned_order_items.price,
    cleaned_order_items.freight_value,
    cleaned_products.product_category_name,
    cleaned_products.product_name_lenght,
    cleaned_products.product_description_lenght  
FROM
    cleaned_orders
JOIN
    cleaned_customers ON cleaned_orders.customer_id = cleaned_customers.customer_id
JOIN
    cleaned_order_items ON cleaned_orders.order_id = cleaned_order_items.order_id
JOIN
    cleaned_products ON cleaned_order_items.product_id = cleaned_products.product_id;



